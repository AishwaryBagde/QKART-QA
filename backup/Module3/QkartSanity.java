/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't
         * 2. Generate a unique string using the timestamp
         * 3. Capture screenshot
         * 4. Save the screenshot inside the "/screenshots" folder using the following
         * naming convention: screenshot_<Timestamp>_<ScreenshotType>_<Description>.png
         * eg: screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        try {
            File theDir = new File("/screenshots");
            if (!theDir.exists()) {
                theDir.mkdirs();
            }
            String timestamp = String.valueOf(java.time.LocalDateTime.now());
            String fileName = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType, description);

            TakesScreenshot scrShot = ((TakesScreenshot) driver);
            File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);

            File DestFile = new File("screenshots/" + fileName);
            FileUtils.copyFile(SrcFile, DestFile);


        }catch (Exception e) {
                e.printStackTrace();
            }

    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
       
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        takeScreenshot(driver, "Start_test_case", "TestCase01");

        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return false;
        } else {
            // logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", status ? "PASS" : "FAIL");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");

        takeScreenshot(driver, "Tc01_Login ", "TestCase01");

        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");

       takeScreenshot(driver, "End_test_case", "TestCase01");
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

       takeScreenshot(driver, "Start_test_case", "TestCase02");

        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

       takeScreenshot(driver, "Tc02_Registration failure", "TestCase02");

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "FAIL" : "PASS");

       takeScreenshot(driver, "End_test_case", "TestCase02");

        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();


       takeScreenshot(driver, "Start_test_case", "TestCase03");

        // SLEEP_STMT_01 : Wait for Page to Load

        // Thread.sleep(5000);

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
       takeScreenshot(driver, "searchForProduct", "TestCase03");

        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();
       
        // Verify the search results are available
        if (searchResults.size() == 0) {
            
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toLowerCase().contains("yonex")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        takeScreenshot(driver, "searchForProduct__NoResultound", "TestCase03");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        System.out.println(searchResults.size());
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
            }
            logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
            return false;
        }
      takeScreenshot(driver, "End_test_case", "TestCase03");

        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

       takeScreenshot(driver, "Start_test_case", "TestCase04");

        // SLEEP_STMT_03 : Wait for page to load
        Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        // WebDriverWait wait = new WebDriverWait(driver, 3);
        // wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.className(" css-rhsghg"))));

        takeScreenshot(driver, "searchForProduct", "TestCase04");
        
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists(driver)) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart(driver)) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");

        takeScreenshot(driver, "End_test_case", "TestCase04");

        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */


  
     public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

       takeScreenshot(driver, "Start_test_case", "TestCase05");

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("YONEX");
        Thread.sleep(1000);
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

       takeScreenshot(driver, "searchForProduct_AddProductToCart", "TestCase05");

        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

       takeScreenshot(driver, "searchForProduct_AddProductToCart", "TestCase05");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        // Thread.sleep(3000);

        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.urlContains("https://crio-qkart-frontend-qa.vercel.app/thanks"));
      

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
       takeScreenshot(driver, "End_test_case", "TestCase05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
       // Home homePage = new Home(driver);
        //Register registration = new Register(driver);
        //Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();


        status = registration.registerUser("testUser", "abc@123", true);

        takeScreenshot(driver, "Start_test_case", "TestCase06");

        if (!status) {
            logStatus("TestCase 6", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // TODO: Login using the newly registed user
        Login login = new Login(driver);
        login.navigateToLoginPage();

        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // TODO: Add "Xtend Smart Watch" to cart
        Thread.sleep(3000);
        status = homePage.searchForProduct("Xtend Smart Watch");
        homePage.addProductToCart("Xtend Smart Watch");

        takeScreenshot(driver, "searchForProduct_AddProductToCart", "TestCase06");

        // TODO: Add "Yarine Floor Lamp" to cart
        status = homePage.searchForProduct("Yarine Floor Lamp");
        homePage.addProductToCart("Yarine Floor Lamp");

        takeScreenshot(driver, "searchForProduct_AddProductToCart", "TestCase06");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        takeScreenshot(driver, "placeOrder", "TestCase06");
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        Thread.sleep(3000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "End_test_case", "TestCase06");
        return status;
    }

    /*
     * Verify that the cart contents are persisted after logout
     */
    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        List<String> expectedResult = Arrays.asList("Stylecon 9 Seater RHS Sofa Set",
                "Xtend Smart Watch");

        logStatus("Start TestCase", "Test Case 7: Verify that cart contents are persisted after logout", "DONE");

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 07: MILESTONE 6
        // TODO: Register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        status = registration.registerUser("testUser", "abc@123", true);

        takeScreenshot(driver, "Start_test_case", "TestCase07");

        if (!status) {
            logStatus("TestCase 7", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // TODO: Login using the newly registed user
        Login login = new Login(driver);
        login.navigateToLoginPage();

        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }
        // TODO: Login using the newly created user
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");

       takeScreenshot(driver, "searchForProduct_AddProductToCart", "TestCase06");


        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");

        takeScreenshot(driver, "searchForProduct_AddProductToCart", "TestCase06");


        homePage.PerformLogout();

        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        Thread.sleep(3000);

        status = homePage.verifyCartContents(expectedResult);

        logStatus("End TestCase", "Test Case 7: Verify that cart contents are persisted after logout: ",
                status ? "PASS" : "FAIL");

        homePage.PerformLogout();
       takeScreenshot(driver, "End_test_case", "TestCase07");
        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);

        takeScreenshot(driver, "Start_test_case", "TestCase08");

        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        Thread.sleep(3000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        takeScreenshot(driver, "changeProductQuantityinCart", "TestCase08");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();

        takeScreenshot(driver, "placeOrder", "TestCase08");

        Thread.sleep(3000);

        String errorMsg = "You do not have enough balance in your wallet for this purchase";
        status = checkoutPage.verifyInsufficientBalanceMessage(errorMsg);

        logStatus("End TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");

                takeScreenshot(driver, "End_test_case", "TestCase08");
        return status;
    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        List<String> expectedResult = Arrays.asList("YONEX Smash Badminton Racquet");

        logStatus("Start TestCase", "Test Case 9: Verify Happy Flow of buying products", "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        status = registration.registerUser("Testuser", "abc@123", true);
        if(!status){
            logStatus("Step_Failure", "User Perform Registration Failed", status? "Pass" : "Fail");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();

        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if(!status){
            logStatus("Step_Failure", "User Perform Registration Failed", status? "Pass" : "Fail");
            logStatus("End TestCase", "Test Case 9: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
                 return false;
             }else {
                 logStatus("TestCase 09","Test Case Pass.User Login Pass","PASS");
             }
        
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        
        status = homePage.searchForProduct( "YONEX Smash Badminton Racquet");

        if (!status) {
            logStatus("TestCase 9", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();
       
        // Verify the search results are available
        if (searchResults.size() == 0) {
            
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        //Thread.sleep(2000);
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        
        String link=driver.getCurrentUrl();
        driver.switchTo().newWindow(WindowType.TAB);
        driver.navigate().to(link);
        

        status=homePage.verifyCartContents(expectedResult);

        logStatus("End TestCase",
        "Test Case 9: Verify that New tab Opened: ",status ? "PASS" : "FAIL");


        return status;
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status = false;

        logStatus("Start TestCase", "Test Case 10: Verify Privacy & Term of service page", "DONE");

        driver.get("https://crio-qkart-frontend-qa.vercel.app/");

        // Get the handle for the main window (which currently is in focus)
        String mainWindowhandle = driver.getWindowHandle();

       WebElement privacyBtn =  driver.findElement(By.xpath("//a[contains(text(),'Privacy policy')]"));
       privacyBtn.click();
       
       Thread.sleep(3000); 

        // Verify the parent tab's url is the same one
        status = driver.getCurrentUrl().equals("https://crio-qkart-frontend-qa.vercel.app/");
        logStatus("TestCase 10", "Test Case 10: Verify that URL of parent tab is the same one: ",
        status ? "PASS" : "FAIL");

    //     // Get all the window handles
    //    Set<String> window_handles = driver.getWindowHandles();
    //    for (String handle : window_handles){
    //     if(!handle.equals(mainWindowhandle)){
    //         driver.switchTo().window(handle);
    //         Thread.sleep(3000);
    //      }
    //    }

       driver.switchTo().window(mainWindowhandle);
       Thread.sleep(3000);

        //Open Terms of Service page 
       WebElement terms_Of_ServiceBtn = driver.findElement(By.xpath("//a[contains(text(),'Terms of Service')]"));
       terms_Of_ServiceBtn.click();
       Thread.sleep(3000);

     // Verify the parent tab's url is the same one
     status = driver.getCurrentUrl().equals("https://crio-qkart-frontend-qa.vercel.app/");
     logStatus("TestCase 10", "Test Case 10: Verify that URL of parent tab is the same one: ",
     status ? "PASS" : "FAIL");


    //    Set<String> terms_Of_Service = driver.getWindowHandles();
    //    for(String handle: terms_Of_Service){
    //     if(!handle.equals(mainWindowhandle)){
    //         driver.switchTo().window(handle);
    //         Thread.sleep(3000);
    //      }
    //    }

       driver.switchTo().window(mainWindowhandle);
       Thread.sleep(3000);


       //Open About us page  
       WebElement about_usBtn = driver.findElement(By.xpath("//a[contains(text(),'About us')]"));
       about_usBtn.click();
       Thread.sleep(3000);

       Set<String> aboutUs = driver.getWindowHandles();

       for(String handle: aboutUs){
         // If not the main window, switch to it so that we can close it
        if(!handle.equals(mainWindowhandle)){
            driver.switchTo().window(handle);
            Thread.sleep(3000);
            driver.close();
         }
       }

       Thread.sleep(1000);
       driver.switchTo().window(mainWindowhandle);
       
        logStatus("End TestCase", "Test Case 10: Verify Privacy & Term of service page: ",
        status ? "PASS" : "FAIL");

        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        logStatus("Start TestCase", "Test Case 11: Verify Bussiness Buttons are Working", "DONE");


        driver.get("https://crio-qkart-frontend-qa.vercel.app/");

        WebElement contact_us = driver.findElement(By.xpath("//p[contains(text(),'Contact us')]"));
        contact_us.click();
        Thread.sleep(3000);

        WebElement name = driver.findElement(By.xpath("//input[contains(@placeholder,'Name')]"));
        name.sendKeys("crio user");

        
        WebElement email = driver.findElement(By.xpath("//input[contains(@placeholder,'Email')]"));
        email.sendKeys("criouser@gmail.com");


        WebElement message = driver.findElement(By.xpath("//input[contains(@placeholder,'Message')]"));
        message.sendKeys("Testing the contact us page");

       
        WebElement contactBtn = driver.findElement(By.className("m-b-20"));
        contactBtn.click();
        WebDriverWait wait = new WebDriverWait(driver, 10);

        if (wait.until(ExpectedConditions.invisibilityOf(driver.findElement(By.className("card-block"))))){
            logStatus("End TestCase",
            "Test Case 11: Verify Bussiness Buttons are Working: ","PASS");
            return true;
        }
        
        logStatus("End TestCase",
        "Test Case 11: Verify Bussiness Buttons are not Working: ","FAIL");

        return status;
       
    }

   public static Boolean TestCase12(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;

        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        takeScreenshot(driver, "StartTestCase", "Testcase012");
        logStatus("Start TestCase", "Test Case 12: Advertisment", "DONE");
         Register registration= new Register(driver);
        registration.navigateToRegisterPage();
         status = registration.registerUser("testUser6", "abc@123", true);
         if (!status) {
            logStatus("End TestCase", "Test Case 12: Verify user Registration : ", status ? "PASS" : "FAIL");
            //return false
            return false;
        } else {
            logStatus("TestCase 12", "User Registration Pass ",  "PASS");

        }
        lastGeneratedUserName = registration.lastGeneratedUsername;


        // TODO: Login using the newly registed user
        Login log1= new Login(driver);
        status = log1.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 6: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }
        Home homePage= new Home(driver);
        homePage.navigateToHome();

        // TODO: Add "Xtend Smart Watch" to cart
        status=homePage.searchForProduct("YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);
        
        // status = driver.getCurrentUrl().endsWith("/thanks");
        String currentURL = driver.getCurrentUrl();
        System.out.println(currentURL);

        int size=driver.findElements(By.tagName("iframe")).size();
       // driver.findElement(By.xpath("//*[@id='root']/div/div[2]/div/iframe[1]")).click();
      //  System.out.println(size);   
        // for(int i=0; i<size;i++){
        //     driver.switchTo().frame(i);
        //     driver.findElements(By.xpath("//*[@id='continue-btn']"));
        //     //.click();// Adriver.findEelement(xpath).click(0); --View Cart
        //     //same for Addint total= to cart
        //     driver.findElements(By.xpath("//*[@id='continue-btn']"));//.click();
        //     //System.out.prinint total=tln(total);
        //     // come to the parent frame
        
        // }
        status=size==3;
        logStatus("Step ", "Verify that 3 Advertisements are available", status ? "PASS" : "FAIL");

        WebElement Advertisement1 = driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[1]"));
        driver.switchTo().frame(Advertisement1);
        driver.findElement(By.xpath("//button[text()='Buy Now']")).click();
        driver.switchTo().parentFrame();

        status = !driver.getCurrentUrl().equals(currentURL);
      //  System.out.println(driver.getCurrentUrl());
        logStatus("Step ", "Verify that Advertisement 1 is clickable ", status ? "PASS" : "FAIL");

        driver.get(currentURL);
        Thread.sleep(3000);

        WebElement Advertisement2 = driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[2]"));
        driver.switchTo().frame(Advertisement2);
        driver.findElement(By.xpath("//button[text()='Buy Now']")).click();
        driver.switchTo().parentFrame();

        status = !driver.getCurrentUrl().equals(currentURL);
        logStatus("Step ", "Verify that Advertisement 2 is clickable ", status ? "PASS" : "FAIL");

        logStatus("End TestCase",
                "Test Case 12:  Ensure that the links on the QKART advertisement are clickable",
                status ? "PASS" : "FAIL");

        return status;
    }

    // public static Boolean TestCase12(RemoteWebDriver driver) throws InterruptedException {
    //     Boolean status = false;
    //     // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -

    //     logStatus("Start TestCase", "Test Case 12: verify if ads are displayed on the final page", "DONE");

    //     Register registration = new Register(driver);
    //     registration.navigateToRegisterPage();

    //     status = registration.registerUser("testUser", "abc@123", true);
    //     if (!status) {
    //        // logStatus("TestCase 1", "Test Case Pass. User Registration Pass",  status ? "PASS" : "FAIL");
    //         logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");

    //         // Return False as the test case Fails
    //         return false;
    //     } else {
    //         // logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
    //         logStatus("TestCase 12", "Test Case Pass. User Registration Pass", status ? "PASS" : "FAIL");
    //     }

    //     lastGeneratedUserName = registration.lastGeneratedUsername;

    //     // Go to the login page
    //     Login login = new Login(driver);
    //     login.navigateToLoginPage();

    //     // Login with the newly registered user's credentials
    //     status = login.PerformLogin(lastGeneratedUserName, "abc@123");
    //     if (!status) {
    //         logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
    //         logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
    //     }

    //     // Go to the home page
    //     Home homePage = new Home(driver);
    //     homePage.navigateToHome();

    //     // Find required products by searching and add them to the user's cart
    //     status = homePage.searchForProduct("YONEX Smash Badminton Racquet");
    //     homePage.addProductToCart("YONEX Smash Badminton Racquet");
        

    //     homePage.clickCheckout();

    //     // Add a new address on the Checkout page and select it
    //     Checkout checkoutPage = new Checkout(driver);
    //     checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
    //     checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

    //     // Place the order
    //     checkoutPage.placeOrder();
    //     Thread.sleep(3000);


    //     WebDriverWait wait = new WebDriverWait(driver, 10);
    //     wait.until(ExpectedConditions.urlContains("/thanks"));

    //     //1st add oth index
    //     driver.switchTo().frame(0);
    
    //     WebElement viewCartbtn1 = driver.findElement(By.xpath("//button[contains(text(),'View Cart')]"));
    //     viewCartbtn1.isEnabled();
    //     viewCartbtn1.click();
      
    //     driver.get("https://crio-qkart-frontend-qa.vercel.app/thanks");

    //     driver.switchTo().frame(0);

    //     WebElement buyNowBtn1 = driver.findElement(By.xpath("//button[contains(text(),'Buy Now')]"));
    //     buyNowBtn1.isEnabled();
    //     buyNowBtn1.click();

    //     driver.get("https://crio-qkart-frontend-qa.vercel.app/thanks");

    //         //2nd add 1st index
    //     driver.switchTo().frame(1);

    //     WebElement viewCartbtn2 = driver.findElement(By.xpath("//button[contains(text(),'View Cart')]"));
    //     viewCartbtn2.isEnabled();
    //     viewCartbtn2.click();

    //     driver.get("https://crio-qkart-frontend-qa.vercel.app/thanks");

    //     driver.switchTo().frame(1);

    //     WebElement buyNowBtn2 = driver.findElement(By.xpath("//button[contains(text(),'Buy Now')]"));
    //     buyNowBtn2.isEnabled();
    //     buyNowBtn2.click();

    //     driver.get("https://crio-qkart-frontend-qa.vercel.app/thanks");


    //     //3rd add 2nd index
    //     driver.switchTo().frame(2);

    //     WebElement coronaAdd = driver.findElement(By.xpath("//iframe[contains(@title,'scroll')]"));
    //     if(coronaAdd.isDisplayed()){
    //         logStatus("End TestCase",
    //     "Test Case 12: Verify if ads are displayed on the final page : ","PASS" );
    //         return true;
    //     }

    //     logStatus("End TestCase",
    //     "Test Case 12: Verify if ads are displayed on the final page : ",status ? "PASS" : "FAIL");

    //     return status;
    // }

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        RemoteWebDriver driver = createDriver();
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

          //  Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

          //Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            
    
          //  Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

        // // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");


          // Execute Test Case 6
            totalTests += 1;
             status = TestCase06(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

           // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

          //Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

         // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

          // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

           // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

          // Execute Test Case 12
            totalTests += 1;
            status = TestCase12(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}